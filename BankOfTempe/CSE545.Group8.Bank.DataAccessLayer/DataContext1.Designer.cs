//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2016-10-20 PM 05:41:26
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace BankofasuContext
{

    [DatabaseAttribute(Name = "bankofasu")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class BankofasuDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(BankofasuDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertMigrationhistory(Migrationhistory instance);
        partial void UpdateMigrationhistory(Migrationhistory instance);
        partial void DeleteMigrationhistory(Migrationhistory instance);
        partial void InsertAccount(Account instance);
        partial void UpdateAccount(Account instance);
        partial void DeleteAccount(Account instance);
        partial void InsertAspnetrole(Aspnetrole instance);
        partial void UpdateAspnetrole(Aspnetrole instance);
        partial void DeleteAspnetrole(Aspnetrole instance);
        partial void InsertAspnetuserclaim(Aspnetuserclaim instance);
        partial void UpdateAspnetuserclaim(Aspnetuserclaim instance);
        partial void DeleteAspnetuserclaim(Aspnetuserclaim instance);
        partial void InsertAspnetuserlogin(Aspnetuserlogin instance);
        partial void UpdateAspnetuserlogin(Aspnetuserlogin instance);
        partial void DeleteAspnetuserlogin(Aspnetuserlogin instance);
        partial void InsertAspnetuser(Aspnetuser instance);
        partial void UpdateAspnetuser(Aspnetuser instance);
        partial void DeleteAspnetuser(Aspnetuser instance);
        partial void InsertCreditcardDetail(CreditcardDetail instance);
        partial void UpdateCreditcardDetail(CreditcardDetail instance);
        partial void DeleteCreditcardDetail(CreditcardDetail instance);
        partial void InsertCreditcardTransaction(CreditcardTransaction instance);
        partial void UpdateCreditcardTransaction(CreditcardTransaction instance);
        partial void DeleteCreditcardTransaction(CreditcardTransaction instance);
        partial void InsertCustomerInfo(CustomerInfo instance);
        partial void UpdateCustomerInfo(CustomerInfo instance);
        partial void DeleteCustomerInfo(CustomerInfo instance);
        partial void InsertDebitcard(Debitcard instance);
        partial void UpdateDebitcard(Debitcard instance);
        partial void DeleteDebitcard(Debitcard instance);
        partial void InsertEmployeeInfo(EmployeeInfo instance);
        partial void UpdateEmployeeInfo(EmployeeInfo instance);
        partial void DeleteEmployeeInfo(EmployeeInfo instance);
        partial void InsertSystemLog(SystemLog instance);
        partial void UpdateSystemLog(SystemLog instance);
        partial void DeleteSystemLog(SystemLog instance);
        partial void InsertTransaction(Transaction instance);
        partial void UpdateTransaction(Transaction instance);
        partial void DeleteTransaction(Transaction instance);
        partial void InsertUserSecurityQuestion(UserSecurityQuestion instance);
        partial void UpdateUserSecurityQuestion(UserSecurityQuestion instance);
        partial void DeleteUserSecurityQuestion(UserSecurityQuestion instance);

        #endregion

        public BankofasuDataContext() :
        base(GetConnectionString("BankofasuDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public BankofasuDataContext(MappingSource mappingSource) :
        base(GetConnectionString("BankofasuDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public BankofasuDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BankofasuDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BankofasuDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BankofasuDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Migrationhistory> Migrationhistories
        {
            get
            {
                return this.GetTable<Migrationhistory>();
            }
        }

        public Devart.Data.Linq.Table<Account> Accounts
        {
            get
            {
                return this.GetTable<Account>();
            }
        }

        public Devart.Data.Linq.Table<Aspnetrole> Aspnetroles
        {
            get
            {
                return this.GetTable<Aspnetrole>();
            }
        }

        public Devart.Data.Linq.Table<Aspnetuserclaim> Aspnetuserclaims
        {
            get
            {
                return this.GetTable<Aspnetuserclaim>();
            }
        }

        public Devart.Data.Linq.Table<Aspnetuserlogin> Aspnetuserlogins
        {
            get
            {
                return this.GetTable<Aspnetuserlogin>();
            }
        }

        public Devart.Data.Linq.Table<Aspnetuser> Aspnetusers
        {
            get
            {
                return this.GetTable<Aspnetuser>();
            }
        }

        public Devart.Data.Linq.Table<CreditcardDetail> CreditcardDetails
        {
            get
            {
                return this.GetTable<CreditcardDetail>();
            }
        }

        public Devart.Data.Linq.Table<CreditcardTransaction> CreditcardTransactions
        {
            get
            {
                return this.GetTable<CreditcardTransaction>();
            }
        }

        public Devart.Data.Linq.Table<CustomerInfo> CustomerInfos
        {
            get
            {
                return this.GetTable<CustomerInfo>();
            }
        }

        public Devart.Data.Linq.Table<Debitcard> Debitcards
        {
            get
            {
                return this.GetTable<Debitcard>();
            }
        }

        public Devart.Data.Linq.Table<EmployeeInfo> EmployeeInfos
        {
            get
            {
                return this.GetTable<EmployeeInfo>();
            }
        }

        public Devart.Data.Linq.Table<SystemLog> SystemLogs
        {
            get
            {
                return this.GetTable<SystemLog>();
            }
        }

        public Devart.Data.Linq.Table<Transaction> Transactions
        {
            get
            {
                return this.GetTable<Transaction>();
            }
        }

        public Devart.Data.Linq.Table<UserSecurityQuestion> UserSecurityQuestions
        {
            get
            {
                return this.GetTable<UserSecurityQuestion>();
            }
        }
    }
}

namespace BankofasuContext
{

    /// <summary>
    /// There are no comments for BankofasuContext.Migrationhistory in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.`__migrationhistory`")]
    public partial class Migrationhistory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MigrationId;

        private string _ContextKey;

        private byte[] _Model;

        private string _ProductVersion;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMigrationIdChanging(string value);
        partial void OnMigrationIdChanged();
        partial void OnContextKeyChanging(string value);
        partial void OnContextKeyChanged();
        partial void OnModelChanging(byte[] value);
        partial void OnModelChanged();
        partial void OnProductVersionChanging(string value);
        partial void OnProductVersionChanged();
        #endregion

        public Migrationhistory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MigrationId in the schema.
        /// </summary>
        [Column(Storage = "_MigrationId", CanBeNull = false, DbType = "VARCHAR(150) NOT NULL", IsPrimaryKey = true)]
        public string MigrationId
        {
            get
            {
                return this._MigrationId;
            }
            set
            {
                if (this._MigrationId != value)
                {
                    this.OnMigrationIdChanging(value);
                    this.SendPropertyChanging();
                    this._MigrationId = value;
                    this.SendPropertyChanged("MigrationId");
                    this.OnMigrationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContextKey in the schema.
        /// </summary>
        [Column(Storage = "_ContextKey", CanBeNull = false, DbType = "VARCHAR(300) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ContextKey
        {
            get
            {
                return this._ContextKey;
            }
            set
            {
                if (this._ContextKey != value)
                {
                    this.OnContextKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ContextKey = value;
                    this.SendPropertyChanged("ContextKey");
                    this.OnContextKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Model in the schema.
        /// </summary>
        [Column(Storage = "_Model", CanBeNull = false, DbType = "LONGBLOB NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductVersion in the schema.
        /// </summary>
        [Column(Storage = "_ProductVersion", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductVersion
        {
            get
            {
                return this._ProductVersion;
            }
            set
            {
                if (this._ProductVersion != value)
                {
                    this.OnProductVersionChanging(value);
                    this.SendPropertyChanging();
                    this._ProductVersion = value;
                    this.SendPropertyChanged("ProductVersion");
                    this.OnProductVersionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.Account in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.account")]
    public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AccountId;

        private string _AccountType;

        private decimal _AvailableBalance = 0.00m;

        private System.DateTime _CreatedOn;

        private System.Nullable<System.DateTime> _ClosingDt;

        private string _Status = @"Active";

        private string _CustomerId;
        #pragma warning restore 0649

        private EntityRef<CustomerInfo> _CustomerInfo;

        private EntitySet<CreditcardDetail> _CreditcardDetails;

        private EntitySet<Debitcard> _Debitcards;

        private EntitySet<Transaction> _Transactions;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAccountIdChanging(int value);
        partial void OnAccountIdChanged();
        partial void OnAccountTypeChanging(string value);
        partial void OnAccountTypeChanged();
        partial void OnAvailableBalanceChanging(decimal value);
        partial void OnAvailableBalanceChanged();
        partial void OnCreatedOnChanging(System.DateTime value);
        partial void OnCreatedOnChanged();
        partial void OnClosingDtChanging(System.Nullable<System.DateTime> value);
        partial void OnClosingDtChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCustomerIdChanging(string value);
        partial void OnCustomerIdChanged();
        #endregion

        public Account()
        {
            this._CustomerInfo  = default(EntityRef<CustomerInfo>);
            this._CreditcardDetails = new EntitySet<CreditcardDetail>(new Action<CreditcardDetail>(this.attach_CreditcardDetails), new Action<CreditcardDetail>(this.detach_CreditcardDetails));
            this._Debitcards = new EntitySet<Debitcard>(new Action<Debitcard>(this.attach_Debitcards), new Action<Debitcard>(this.detach_Debitcards));
            this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AccountId in the schema.
        /// </summary>
        [Column(Name = @"Account_id", Storage = "_AccountId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(8) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if (this._AccountId != value)
                {
                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountType in the schema.
        /// </summary>
        [Column(Name = @"Account_type", Storage = "_AccountType", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AccountType
        {
            get
            {
                return this._AccountType;
            }
            set
            {
                if (this._AccountType != value)
                {
                    this.OnAccountTypeChanging(value);
                    this.SendPropertyChanging();
                    this._AccountType = value;
                    this.SendPropertyChanged("AccountType");
                    this.OnAccountTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AvailableBalance in the schema.
        /// </summary>
        [Column(Name = @"Available_balance", Storage = "_AvailableBalance", CanBeNull = false, DbType = "DECIMAL(10,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal AvailableBalance
        {
            get
            {
                return this._AvailableBalance;
            }
            set
            {
                if (this._AvailableBalance != value)
                {
                    this.OnAvailableBalanceChanging(value);
                    this.SendPropertyChanging();
                    this._AvailableBalance = value;
                    this.SendPropertyChanged("AvailableBalance");
                    this.OnAvailableBalanceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreatedOn in the schema.
        /// </summary>
        [Column(Name = @"Created_on", Storage = "_CreatedOn", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime CreatedOn
        {
            get
            {
                return this._CreatedOn;
            }
            set
            {
                if (this._CreatedOn != value)
                {
                    this.OnCreatedOnChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedOn = value;
                    this.SendPropertyChanged("CreatedOn");
                    this.OnCreatedOnChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ClosingDt in the schema.
        /// </summary>
        [Column(Name = @"Closing_dt", Storage = "_ClosingDt", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ClosingDt
        {
            get
            {
                return this._ClosingDt;
            }
            set
            {
                if (this._ClosingDt != value)
                {
                    this.OnClosingDtChanging(value);
                    this.SendPropertyChanging();
                    this._ClosingDt = value;
                    this.SendPropertyChanged("ClosingDt");
                    this.OnClosingDtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"Customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    if (this._CustomerInfo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerInfo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerInfo_Account", Storage="_CustomerInfo", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
        public CustomerInfo CustomerInfo
        {
            get
            {
                return this._CustomerInfo.Entity;
            }
            set
            {
                CustomerInfo previousValue = this._CustomerInfo.Entity;
                if ((previousValue != value) || (this._CustomerInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CustomerInfo.Entity = null;
                        previousValue.Accounts.Remove(this);
                    }
                    this._CustomerInfo.Entity = value;
                    if (value != null)
                    {
                        this._CustomerId = value.Id;
                        value.Accounts.Add(this);
                    }
                    else
                    {
                        this._CustomerId = default(string);
                    }
                    this.SendPropertyChanged("CustomerInfo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditcardDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Account_CreditcardDetail", Storage="_CreditcardDetails", ThisKey="AccountId", OtherKey="AccountId", DeleteRule="NO ACTION")]
        public EntitySet<CreditcardDetail> CreditcardDetails
        {
            get
            {
                return this._CreditcardDetails;
            }
            set
            {
                this._CreditcardDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Debitcards in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Account_Debitcard", Storage="_Debitcards", ThisKey="AccountId", OtherKey="AccountId", DeleteRule="NO ACTION")]
        public EntitySet<Debitcard> Debitcards
        {
            get
            {
                return this._Debitcards;
            }
            set
            {
                this._Debitcards.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Transactions in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Account_Transaction", Storage="_Transactions", ThisKey="AccountId", OtherKey="AccountId", DeleteRule="NO ACTION")]
        public EntitySet<Transaction> Transactions
        {
            get
            {
                return this._Transactions;
            }
            set
            {
                this._Transactions.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CreditcardDetails(CreditcardDetail entity)
        {
            this.SendPropertyChanging("CreditcardDetails");
            entity.Account = this;
        }
    
        private void detach_CreditcardDetails(CreditcardDetail entity)
        {
            this.SendPropertyChanging("CreditcardDetails");
            entity.Account = null;
        }

        private void attach_Debitcards(Debitcard entity)
        {
            this.SendPropertyChanging("Debitcards");
            entity.Account = this;
        }
    
        private void detach_Debitcards(Debitcard entity)
        {
            this.SendPropertyChanging("Debitcards");
            entity.Account = null;
        }

        private void attach_Transactions(Transaction entity)
        {
            this.SendPropertyChanging("Transactions");
            entity.Account = this;
        }
    
        private void detach_Transactions(Transaction entity)
        {
            this.SendPropertyChanging("Transactions");
            entity.Account = null;
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.Aspnetrole in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.aspnetroles")]
    public partial class Aspnetrole : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<Aspnetuser> _Aspnetusers;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Aspnetrole()
        {
            this._Aspnetusers = new EntitySet<Aspnetuser>(new Action<Aspnetuser>(this.attach_Aspnetusers), new Action<Aspnetuser>(this.detach_Aspnetusers));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(256) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aspnetusers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetrole_Aspnetuser", Storage="_Aspnetusers", ThisKey="Id", OtherKey="Id", LinkTableName=@"bankofasu.aspnetuserroles", LinkThisKey=@"RoleId", LinkOtherKey=@"UserId")]
        public EntitySet<Aspnetuser> Aspnetusers
        {
            get
            {
                return this._Aspnetusers;
            }
            set
            {
                this._Aspnetusers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Aspnetusers(Aspnetuser entity)
        {
            this.SendPropertyChanging("Aspnetusers");
            entity.Aspnetroles.Add(this);
        }
    
        private void detach_Aspnetusers(Aspnetuser entity)
        {
            this.SendPropertyChanging("Aspnetusers");
            entity.Aspnetroles.Remove(this);
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.Aspnetuserclaim in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.aspnetuserclaims")]
    public partial class Aspnetuserclaim : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _UserId;

        private string _ClaimType;

        private string _ClaimValue;
        #pragma warning restore 0649

        private EntityRef<Aspnetuser> _Aspnetuser;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnClaimTypeChanging(string value);
        partial void OnClaimTypeChanged();
        partial void OnClaimValueChanging(string value);
        partial void OnClaimValueChanged();
        #endregion

        public Aspnetuserclaim()
        {
            this._Aspnetuser  = default(EntityRef<Aspnetuser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._Aspnetuser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ClaimType in the schema.
        /// </summary>
        [Column(Storage = "_ClaimType", DbType = "LONGTEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ClaimType
        {
            get
            {
                return this._ClaimType;
            }
            set
            {
                if (this._ClaimType != value)
                {
                    this.OnClaimTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ClaimType = value;
                    this.SendPropertyChanged("ClaimType");
                    this.OnClaimTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ClaimValue in the schema.
        /// </summary>
        [Column(Storage = "_ClaimValue", DbType = "LONGTEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ClaimValue
        {
            get
            {
                return this._ClaimValue;
            }
            set
            {
                if (this._ClaimValue != value)
                {
                    this.OnClaimValueChanging(value);
                    this.SendPropertyChanging();
                    this._ClaimValue = value;
                    this.SendPropertyChanged("ClaimValue");
                    this.OnClaimValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aspnetuser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_Aspnetuserclaim", Storage="_Aspnetuser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
        public Aspnetuser Aspnetuser
        {
            get
            {
                return this._Aspnetuser.Entity;
            }
            set
            {
                Aspnetuser previousValue = this._Aspnetuser.Entity;
                if ((previousValue != value) || (this._Aspnetuser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Aspnetuser.Entity = null;
                        previousValue.Aspnetuserclaims.Remove(this);
                    }
                    this._Aspnetuser.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.Id;
                        value.Aspnetuserclaims.Add(this);
                    }
                    else
                    {
                        this._UserId = default(string);
                    }
                    this.SendPropertyChanged("Aspnetuser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.Aspnetuserlogin in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.aspnetuserlogins")]
    public partial class Aspnetuserlogin : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _LoginProvider;

        private string _ProviderKey;

        private string _UserId;
        #pragma warning restore 0649

        private EntityRef<Aspnetuser> _Aspnetuser;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLoginProviderChanging(string value);
        partial void OnLoginProviderChanged();
        partial void OnProviderKeyChanging(string value);
        partial void OnProviderKeyChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        #endregion

        public Aspnetuserlogin()
        {
            this._Aspnetuser  = default(EntityRef<Aspnetuser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LoginProvider in the schema.
        /// </summary>
        [Column(Storage = "_LoginProvider", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string LoginProvider
        {
            get
            {
                return this._LoginProvider;
            }
            set
            {
                if (this._LoginProvider != value)
                {
                    this.OnLoginProviderChanging(value);
                    this.SendPropertyChanging();
                    this._LoginProvider = value;
                    this.SendPropertyChanged("LoginProvider");
                    this.OnLoginProviderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProviderKey in the schema.
        /// </summary>
        [Column(Storage = "_ProviderKey", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string ProviderKey
        {
            get
            {
                return this._ProviderKey;
            }
            set
            {
                if (this._ProviderKey != value)
                {
                    this.OnProviderKeyChanging(value);
                    this.SendPropertyChanging();
                    this._ProviderKey = value;
                    this.SendPropertyChanged("ProviderKey");
                    this.OnProviderKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._Aspnetuser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aspnetuser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_Aspnetuserlogin", Storage="_Aspnetuser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
        public Aspnetuser Aspnetuser
        {
            get
            {
                return this._Aspnetuser.Entity;
            }
            set
            {
                Aspnetuser previousValue = this._Aspnetuser.Entity;
                if ((previousValue != value) || (this._Aspnetuser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Aspnetuser.Entity = null;
                        previousValue.Aspnetuserlogins.Remove(this);
                    }
                    this._Aspnetuser.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.Id;
                        value.Aspnetuserlogins.Add(this);
                    }
                    else
                    {
                        this._UserId = default(string);
                    }
                    this.SendPropertyChanged("Aspnetuser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.Aspnetuser in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.aspnetusers")]
    public partial class Aspnetuser : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private string _FirstName;

        private string _LastName;

        private string _PSK;

        private string _Email;

        private bool _EmailConfirmed;

        private string _PasswordHash;

        private string _SecurityStamp;

        private string _PhoneNumber;

        private bool _PhoneNumberConfirmed;

        private bool _TwoFactorEnabled;

        private System.Nullable<System.DateTime> _LockoutEndDateUtc;

        private bool _LockoutEnabled;

        private int _AccessFailedCount;

        private string _UserName;
        #pragma warning restore 0649

        private EntitySet<Aspnetuserclaim> _Aspnetuserclaims;

        private EntitySet<Aspnetuserlogin> _Aspnetuserlogins;

        private EntityRef<CustomerInfo> _CustomerInfo;

        private EntityRef<EmployeeInfo> _EmployeeInfo;

        private EntityRef<UserSecurityQuestion> _UserSecurityQuestion;

        private EntitySet<Aspnetrole> _Aspnetroles;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnPSKChanging(string value);
        partial void OnPSKChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEmailConfirmedChanging(bool value);
        partial void OnEmailConfirmedChanged();
        partial void OnPasswordHashChanging(string value);
        partial void OnPasswordHashChanged();
        partial void OnSecurityStampChanging(string value);
        partial void OnSecurityStampChanged();
        partial void OnPhoneNumberChanging(string value);
        partial void OnPhoneNumberChanged();
        partial void OnPhoneNumberConfirmedChanging(bool value);
        partial void OnPhoneNumberConfirmedChanged();
        partial void OnTwoFactorEnabledChanging(bool value);
        partial void OnTwoFactorEnabledChanged();
        partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
        partial void OnLockoutEndDateUtcChanged();
        partial void OnLockoutEnabledChanging(bool value);
        partial void OnLockoutEnabledChanged();
        partial void OnAccessFailedCountChanging(int value);
        partial void OnAccessFailedCountChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        #endregion

        public Aspnetuser()
        {
            this._Aspnetuserclaims = new EntitySet<Aspnetuserclaim>(new Action<Aspnetuserclaim>(this.attach_Aspnetuserclaims), new Action<Aspnetuserclaim>(this.detach_Aspnetuserclaims));
            this._Aspnetuserlogins = new EntitySet<Aspnetuserlogin>(new Action<Aspnetuserlogin>(this.attach_Aspnetuserlogins), new Action<Aspnetuserlogin>(this.detach_Aspnetuserlogins));
            this._CustomerInfo  = default(EntityRef<CustomerInfo>);
            this._EmployeeInfo  = default(EntityRef<EmployeeInfo>);
            this._UserSecurityQuestion  = default(EntityRef<UserSecurityQuestion>);
            this._Aspnetroles = new EntitySet<Aspnetrole>(new Action<Aspnetrole>(this.attach_Aspnetroles), new Action<Aspnetrole>(this.detach_Aspnetroles));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    if (this._CustomerInfo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Storage = "_FirstName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Storage = "_LastName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PSK in the schema.
        /// </summary>
        [Column(Storage = "_PSK", CanBeNull = false, DbType = "VARCHAR(16) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PSK
        {
            get
            {
                return this._PSK;
            }
            set
            {
                if (this._PSK != value)
                {
                    this.OnPSKChanging(value);
                    this.SendPropertyChanging();
                    this._PSK = value;
                    this.SendPropertyChanged("PSK");
                    this.OnPSKChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", DbType = "VARCHAR(256) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmailConfirmed in the schema.
        /// </summary>
        [Column(Storage = "_EmailConfirmed", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool EmailConfirmed
        {
            get
            {
                return this._EmailConfirmed;
            }
            set
            {
                if (this._EmailConfirmed != value)
                {
                    this.OnEmailConfirmedChanging(value);
                    this.SendPropertyChanging();
                    this._EmailConfirmed = value;
                    this.SendPropertyChanged("EmailConfirmed");
                    this.OnEmailConfirmedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PasswordHash in the schema.
        /// </summary>
        [Column(Storage = "_PasswordHash", DbType = "LONGTEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PasswordHash
        {
            get
            {
                return this._PasswordHash;
            }
            set
            {
                if (this._PasswordHash != value)
                {
                    this.OnPasswordHashChanging(value);
                    this.SendPropertyChanging();
                    this._PasswordHash = value;
                    this.SendPropertyChanged("PasswordHash");
                    this.OnPasswordHashChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SecurityStamp in the schema.
        /// </summary>
        [Column(Storage = "_SecurityStamp", DbType = "LONGTEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SecurityStamp
        {
            get
            {
                return this._SecurityStamp;
            }
            set
            {
                if (this._SecurityStamp != value)
                {
                    this.OnSecurityStampChanging(value);
                    this.SendPropertyChanging();
                    this._SecurityStamp = value;
                    this.SendPropertyChanged("SecurityStamp");
                    this.OnSecurityStampChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [Column(Storage = "_PhoneNumber", DbType = "LONGTEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PhoneNumber
        {
            get
            {
                return this._PhoneNumber;
            }
            set
            {
                if (this._PhoneNumber != value)
                {
                    this.OnPhoneNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PhoneNumber = value;
                    this.SendPropertyChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhoneNumberConfirmed in the schema.
        /// </summary>
        [Column(Storage = "_PhoneNumberConfirmed", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool PhoneNumberConfirmed
        {
            get
            {
                return this._PhoneNumberConfirmed;
            }
            set
            {
                if (this._PhoneNumberConfirmed != value)
                {
                    this.OnPhoneNumberConfirmedChanging(value);
                    this.SendPropertyChanging();
                    this._PhoneNumberConfirmed = value;
                    this.SendPropertyChanged("PhoneNumberConfirmed");
                    this.OnPhoneNumberConfirmedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TwoFactorEnabled in the schema.
        /// </summary>
        [Column(Storage = "_TwoFactorEnabled", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool TwoFactorEnabled
        {
            get
            {
                return this._TwoFactorEnabled;
            }
            set
            {
                if (this._TwoFactorEnabled != value)
                {
                    this.OnTwoFactorEnabledChanging(value);
                    this.SendPropertyChanging();
                    this._TwoFactorEnabled = value;
                    this.SendPropertyChanged("TwoFactorEnabled");
                    this.OnTwoFactorEnabledChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LockoutEndDateUtc in the schema.
        /// </summary>
        [Column(Storage = "_LockoutEndDateUtc", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> LockoutEndDateUtc
        {
            get
            {
                return this._LockoutEndDateUtc;
            }
            set
            {
                if (this._LockoutEndDateUtc != value)
                {
                    this.OnLockoutEndDateUtcChanging(value);
                    this.SendPropertyChanging();
                    this._LockoutEndDateUtc = value;
                    this.SendPropertyChanged("LockoutEndDateUtc");
                    this.OnLockoutEndDateUtcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LockoutEnabled in the schema.
        /// </summary>
        [Column(Storage = "_LockoutEnabled", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool LockoutEnabled
        {
            get
            {
                return this._LockoutEnabled;
            }
            set
            {
                if (this._LockoutEnabled != value)
                {
                    this.OnLockoutEnabledChanging(value);
                    this.SendPropertyChanging();
                    this._LockoutEnabled = value;
                    this.SendPropertyChanged("LockoutEnabled");
                    this.OnLockoutEnabledChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccessFailedCount in the schema.
        /// </summary>
        [Column(Storage = "_AccessFailedCount", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AccessFailedCount
        {
            get
            {
                return this._AccessFailedCount;
            }
            set
            {
                if (this._AccessFailedCount != value)
                {
                    this.OnAccessFailedCountChanging(value);
                    this.SendPropertyChanging();
                    this._AccessFailedCount = value;
                    this.SendPropertyChanged("AccessFailedCount");
                    this.OnAccessFailedCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR(256) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aspnetuserclaims in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_Aspnetuserclaim", Storage="_Aspnetuserclaims", ThisKey="Id", OtherKey="UserId", DeleteRule="CASCADE")]
        public EntitySet<Aspnetuserclaim> Aspnetuserclaims
        {
            get
            {
                return this._Aspnetuserclaims;
            }
            set
            {
                this._Aspnetuserclaims.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Aspnetuserlogins in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_Aspnetuserlogin", Storage="_Aspnetuserlogins", ThisKey="Id", OtherKey="UserId", DeleteRule="CASCADE")]
        public EntitySet<Aspnetuserlogin> Aspnetuserlogins
        {
            get
            {
                return this._Aspnetuserlogins;
            }
            set
            {
                this._Aspnetuserlogins.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerInfo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_CustomerInfo", Storage="_CustomerInfo", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
        public CustomerInfo CustomerInfo
        {
            get
            {
                return this._CustomerInfo.Entity;
            }
            set
            {
                CustomerInfo previousValue = this._CustomerInfo.Entity;
                if ((previousValue != value) || (this._CustomerInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CustomerInfo.Entity = null;
                        previousValue.Aspnetuser = null;
                    }
                    this._CustomerInfo.Entity = value;
                    if (value != null)
                    {
                        value.Aspnetuser = this;
                    }
                    this.SendPropertyChanged("CustomerInfo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeInfo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_EmployeeInfo", Storage="_EmployeeInfo", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
        public EmployeeInfo EmployeeInfo
        {
            get
            {
                return this._EmployeeInfo.Entity;
            }
            set
            {
                EmployeeInfo previousValue = this._EmployeeInfo.Entity;
                if ((previousValue != value) || (this._EmployeeInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._EmployeeInfo.Entity = null;
                        previousValue.Aspnetuser = null;
                    }
                    this._EmployeeInfo.Entity = value;
                    if (value != null)
                    {
                        value.Aspnetuser = this;
                    }
                    this.SendPropertyChanged("EmployeeInfo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserSecurityQuestion in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_UserSecurityQuestion", Storage="_UserSecurityQuestion", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
        public UserSecurityQuestion UserSecurityQuestion
        {
            get
            {
                return this._UserSecurityQuestion.Entity;
            }
            set
            {
                UserSecurityQuestion previousValue = this._UserSecurityQuestion.Entity;
                if ((previousValue != value) || (this._UserSecurityQuestion.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._UserSecurityQuestion.Entity = null;
                        previousValue.Aspnetuser = null;
                    }
                    this._UserSecurityQuestion.Entity = value;
                    if (value != null)
                    {
                        value.Aspnetuser = this;
                    }
                    this.SendPropertyChanged("UserSecurityQuestion");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aspnetroles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetrole_Aspnetuser", Storage="_Aspnetroles", ThisKey="Id", OtherKey="Id", LinkTableName=@"bankofasu.aspnetuserroles", LinkThisKey=@"UserId", LinkOtherKey=@"RoleId")]
        public EntitySet<Aspnetrole> Aspnetroles
        {
            get
            {
                return this._Aspnetroles;
            }
            set
            {
                this._Aspnetroles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Aspnetuserclaims(Aspnetuserclaim entity)
        {
            this.SendPropertyChanging("Aspnetuserclaims");
            entity.Aspnetuser = this;
        }
    
        private void detach_Aspnetuserclaims(Aspnetuserclaim entity)
        {
            this.SendPropertyChanging("Aspnetuserclaims");
            entity.Aspnetuser = null;
        }

        private void attach_Aspnetuserlogins(Aspnetuserlogin entity)
        {
            this.SendPropertyChanging("Aspnetuserlogins");
            entity.Aspnetuser = this;
        }
    
        private void detach_Aspnetuserlogins(Aspnetuserlogin entity)
        {
            this.SendPropertyChanging("Aspnetuserlogins");
            entity.Aspnetuser = null;
        }

        private void attach_Aspnetroles(Aspnetrole entity)
        {
            this.SendPropertyChanging("Aspnetroles");
            entity.Aspnetusers.Add(this);
        }
    
        private void detach_Aspnetroles(Aspnetrole entity)
        {
            this.SendPropertyChanging("Aspnetroles");
            entity.Aspnetusers.Remove(this);
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.CreditcardDetail in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.creditcard_details")]
    public partial class CreditcardDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CreditCardNum;

        private int _AccountId;

        private string _CustomerId;

        private decimal _CreditLimit;

        private System.DateTime _StartDate;

        private System.DateTime _ExpiryDt;

        private System.DateTime _MonthlyStatementEndDt;

        private string _Status;

        private int _CVV;

        private string _Name;
        #pragma warning restore 0649

        private EntityRef<Account> _Account;

        private EntityRef<CustomerInfo> _CustomerInfo;

        private EntityRef<CreditcardTransaction> _CreditcardTransaction;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCreditCardNumChanging(int value);
        partial void OnCreditCardNumChanged();
        partial void OnAccountIdChanging(int value);
        partial void OnAccountIdChanged();
        partial void OnCustomerIdChanging(string value);
        partial void OnCustomerIdChanged();
        partial void OnCreditLimitChanging(decimal value);
        partial void OnCreditLimitChanged();
        partial void OnStartDateChanging(System.DateTime value);
        partial void OnStartDateChanged();
        partial void OnExpiryDtChanging(System.DateTime value);
        partial void OnExpiryDtChanged();
        partial void OnMonthlyStatementEndDtChanging(System.DateTime value);
        partial void OnMonthlyStatementEndDtChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCVVChanging(int value);
        partial void OnCVVChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public CreditcardDetail()
        {
            this._Account  = default(EntityRef<Account>);
            this._CustomerInfo  = default(EntityRef<CustomerInfo>);
            this._CreditcardTransaction  = default(EntityRef<CreditcardTransaction>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CreditCardNum in the schema.
        /// </summary>
        [Column(Name = @"CreditCard_Num", Storage = "_CreditCardNum", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(16) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CreditCardNum
        {
            get
            {
                return this._CreditCardNum;
            }
            set
            {
                if (this._CreditCardNum != value)
                {
                    if (this._CreditcardTransaction.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCreditCardNumChanging(value);
                    this.SendPropertyChanging();
                    this._CreditCardNum = value;
                    this.SendPropertyChanged("CreditCardNum");
                    this.OnCreditCardNumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountId in the schema.
        /// </summary>
        [Column(Name = @"Account_id", Storage = "_AccountId", CanBeNull = false, DbType = "INT(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if (this._AccountId != value)
                {
                    if (this._Account.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"Customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    if (this._CustomerInfo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditLimit in the schema.
        /// </summary>
        [Column(Name = @"Credit_Limit", Storage = "_CreditLimit", CanBeNull = false, DbType = "DECIMAL(10,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal CreditLimit
        {
            get
            {
                return this._CreditLimit;
            }
            set
            {
                if (this._CreditLimit != value)
                {
                    this.OnCreditLimitChanging(value);
                    this.SendPropertyChanging();
                    this._CreditLimit = value;
                    this.SendPropertyChanged("CreditLimit");
                    this.OnCreditLimitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"Start_date", Storage = "_StartDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExpiryDt in the schema.
        /// </summary>
        [Column(Name = @"Expiry_dt", Storage = "_ExpiryDt", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ExpiryDt
        {
            get
            {
                return this._ExpiryDt;
            }
            set
            {
                if (this._ExpiryDt != value)
                {
                    this.OnExpiryDtChanging(value);
                    this.SendPropertyChanging();
                    this._ExpiryDt = value;
                    this.SendPropertyChanged("ExpiryDt");
                    this.OnExpiryDtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MonthlyStatementEndDt in the schema.
        /// </summary>
        [Column(Name = @"Monthly_statement_end_dt", Storage = "_MonthlyStatementEndDt", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime MonthlyStatementEndDt
        {
            get
            {
                return this._MonthlyStatementEndDt;
            }
            set
            {
                if (this._MonthlyStatementEndDt != value)
                {
                    this.OnMonthlyStatementEndDtChanging(value);
                    this.SendPropertyChanging();
                    this._MonthlyStatementEndDt = value;
                    this.SendPropertyChanged("MonthlyStatementEndDt");
                    this.OnMonthlyStatementEndDtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CVV in the schema.
        /// </summary>
        [Column(Storage = "_CVV", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CVV
        {
            get
            {
                return this._CVV;
            }
            set
            {
                if (this._CVV != value)
                {
                    this.OnCVVChanging(value);
                    this.SendPropertyChanging();
                    this._CVV = value;
                    this.SendPropertyChanged("CVV");
                    this.OnCVVChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Account in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Account_CreditcardDetail", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
        public Account Account
        {
            get
            {
                return this._Account.Entity;
            }
            set
            {
                Account previousValue = this._Account.Entity;
                if ((previousValue != value) || (this._Account.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Account.Entity = null;
                        previousValue.CreditcardDetails.Remove(this);
                    }
                    this._Account.Entity = value;
                    if (value != null)
                    {
                        this._AccountId = value.AccountId;
                        value.CreditcardDetails.Add(this);
                    }
                    else
                    {
                        this._AccountId = default(int);
                    }
                    this.SendPropertyChanged("Account");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerInfo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerInfo_CreditcardDetail", Storage="_CustomerInfo", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
        public CustomerInfo CustomerInfo
        {
            get
            {
                return this._CustomerInfo.Entity;
            }
            set
            {
                CustomerInfo previousValue = this._CustomerInfo.Entity;
                if ((previousValue != value) || (this._CustomerInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CustomerInfo.Entity = null;
                        previousValue.CreditcardDetails.Remove(this);
                    }
                    this._CustomerInfo.Entity = value;
                    if (value != null)
                    {
                        this._CustomerId = value.Id;
                        value.CreditcardDetails.Add(this);
                    }
                    else
                    {
                        this._CustomerId = default(string);
                    }
                    this.SendPropertyChanged("CustomerInfo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditcardTransaction in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CreditcardDetail_CreditcardTransaction", Storage="_CreditcardTransaction", ThisKey="CreditCardNum", OtherKey="CreditCardNum", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
        public CreditcardTransaction CreditcardTransaction
        {
            get
            {
                return this._CreditcardTransaction.Entity;
            }
            set
            {
                CreditcardTransaction previousValue = this._CreditcardTransaction.Entity;
                if ((previousValue != value) || (this._CreditcardTransaction.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CreditcardTransaction.Entity = null;
                        previousValue.CreditcardDetail = null;
                    }
                    this._CreditcardTransaction.Entity = value;
                    if (value != null)
                    {
                        value.CreditcardDetail = this;
                    }
                    this.SendPropertyChanged("CreditcardTransaction");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.CreditcardTransaction in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.creditcard_transactions")]
    public partial class CreditcardTransaction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CreditCardNum;

        private decimal _CreditBalance;

        private System.Nullable<System.DateTime> _LastPaymentDt;

        private System.Nullable<decimal> _LastPaymentAmt;

        private System.DateTime _NextPaymentDt;

        private System.Nullable<decimal> _MonthlyStatementBalance;

        private System.Nullable<decimal> _NextPaymentDue;

        private System.Nullable<decimal> _MinPayDue;

        private System.Nullable<System.DateTime> _LastUpdatedDt;

        private System.Nullable<System.DateTime> _MonthlyStatementEndDt;
        #pragma warning restore 0649

        private EntityRef<CreditcardDetail> _CreditcardDetail;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCreditCardNumChanging(int value);
        partial void OnCreditCardNumChanged();
        partial void OnCreditBalanceChanging(decimal value);
        partial void OnCreditBalanceChanged();
        partial void OnLastPaymentDtChanging(System.Nullable<System.DateTime> value);
        partial void OnLastPaymentDtChanged();
        partial void OnLastPaymentAmtChanging(System.Nullable<decimal> value);
        partial void OnLastPaymentAmtChanged();
        partial void OnNextPaymentDtChanging(System.DateTime value);
        partial void OnNextPaymentDtChanged();
        partial void OnMonthlyStatementBalanceChanging(System.Nullable<decimal> value);
        partial void OnMonthlyStatementBalanceChanged();
        partial void OnNextPaymentDueChanging(System.Nullable<decimal> value);
        partial void OnNextPaymentDueChanged();
        partial void OnMinPayDueChanging(System.Nullable<decimal> value);
        partial void OnMinPayDueChanged();
        partial void OnLastUpdatedDtChanging(System.Nullable<System.DateTime> value);
        partial void OnLastUpdatedDtChanged();
        partial void OnMonthlyStatementEndDtChanging(System.Nullable<System.DateTime> value);
        partial void OnMonthlyStatementEndDtChanged();
        #endregion

        public CreditcardTransaction()
        {
            this._CreditcardDetail  = default(EntityRef<CreditcardDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CreditCardNum in the schema.
        /// </summary>
        [Column(Name = @"CreditCard_Num", Storage = "_CreditCardNum", CanBeNull = false, DbType = "INT(16) NOT NULL", IsPrimaryKey = true)]
        public int CreditCardNum
        {
            get
            {
                return this._CreditCardNum;
            }
            set
            {
                if (this._CreditCardNum != value)
                {
                    if (this._CreditcardDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCreditCardNumChanging(value);
                    this.SendPropertyChanging();
                    this._CreditCardNum = value;
                    this.SendPropertyChanged("CreditCardNum");
                    this.OnCreditCardNumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditBalance in the schema.
        /// </summary>
        [Column(Name = @"Credit_balance", Storage = "_CreditBalance", CanBeNull = false, DbType = "DECIMAL(10,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal CreditBalance
        {
            get
            {
                return this._CreditBalance;
            }
            set
            {
                if (this._CreditBalance != value)
                {
                    this.OnCreditBalanceChanging(value);
                    this.SendPropertyChanging();
                    this._CreditBalance = value;
                    this.SendPropertyChanged("CreditBalance");
                    this.OnCreditBalanceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastPaymentDt in the schema.
        /// </summary>
        [Column(Name = @"Last_Payment_dt", Storage = "_LastPaymentDt", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> LastPaymentDt
        {
            get
            {
                return this._LastPaymentDt;
            }
            set
            {
                if (this._LastPaymentDt != value)
                {
                    this.OnLastPaymentDtChanging(value);
                    this.SendPropertyChanging();
                    this._LastPaymentDt = value;
                    this.SendPropertyChanged("LastPaymentDt");
                    this.OnLastPaymentDtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastPaymentAmt in the schema.
        /// </summary>
        [Column(Name = @"Last_payment_amt", Storage = "_LastPaymentAmt", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> LastPaymentAmt
        {
            get
            {
                return this._LastPaymentAmt;
            }
            set
            {
                if (this._LastPaymentAmt != value)
                {
                    this.OnLastPaymentAmtChanging(value);
                    this.SendPropertyChanging();
                    this._LastPaymentAmt = value;
                    this.SendPropertyChanged("LastPaymentAmt");
                    this.OnLastPaymentAmtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NextPaymentDt in the schema.
        /// </summary>
        [Column(Name = @"Next_payment_dt", Storage = "_NextPaymentDt", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime NextPaymentDt
        {
            get
            {
                return this._NextPaymentDt;
            }
            set
            {
                if (this._NextPaymentDt != value)
                {
                    this.OnNextPaymentDtChanging(value);
                    this.SendPropertyChanging();
                    this._NextPaymentDt = value;
                    this.SendPropertyChanged("NextPaymentDt");
                    this.OnNextPaymentDtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MonthlyStatementBalance in the schema.
        /// </summary>
        [Column(Name = @"Monthly_statement_balance", Storage = "_MonthlyStatementBalance", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MonthlyStatementBalance
        {
            get
            {
                return this._MonthlyStatementBalance;
            }
            set
            {
                if (this._MonthlyStatementBalance != value)
                {
                    this.OnMonthlyStatementBalanceChanging(value);
                    this.SendPropertyChanging();
                    this._MonthlyStatementBalance = value;
                    this.SendPropertyChanged("MonthlyStatementBalance");
                    this.OnMonthlyStatementBalanceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NextPaymentDue in the schema.
        /// </summary>
        [Column(Name = @"Next_payment_due", Storage = "_NextPaymentDue", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> NextPaymentDue
        {
            get
            {
                return this._NextPaymentDue;
            }
            set
            {
                if (this._NextPaymentDue != value)
                {
                    this.OnNextPaymentDueChanging(value);
                    this.SendPropertyChanging();
                    this._NextPaymentDue = value;
                    this.SendPropertyChanged("NextPaymentDue");
                    this.OnNextPaymentDueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinPayDue in the schema.
        /// </summary>
        [Column(Name = @"Min_pay_due", Storage = "_MinPayDue", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> MinPayDue
        {
            get
            {
                return this._MinPayDue;
            }
            set
            {
                if (this._MinPayDue != value)
                {
                    this.OnMinPayDueChanging(value);
                    this.SendPropertyChanging();
                    this._MinPayDue = value;
                    this.SendPropertyChanged("MinPayDue");
                    this.OnMinPayDueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdatedDt in the schema.
        /// </summary>
        [Column(Name = @"Last_Updated_dt", Storage = "_LastUpdatedDt", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> LastUpdatedDt
        {
            get
            {
                return this._LastUpdatedDt;
            }
            set
            {
                if (this._LastUpdatedDt != value)
                {
                    this.OnLastUpdatedDtChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdatedDt = value;
                    this.SendPropertyChanged("LastUpdatedDt");
                    this.OnLastUpdatedDtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MonthlyStatementEndDt in the schema.
        /// </summary>
        [Column(Name = @"Monthly_statement_end_dt", Storage = "_MonthlyStatementEndDt", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> MonthlyStatementEndDt
        {
            get
            {
                return this._MonthlyStatementEndDt;
            }
            set
            {
                if (this._MonthlyStatementEndDt != value)
                {
                    this.OnMonthlyStatementEndDtChanging(value);
                    this.SendPropertyChanging();
                    this._MonthlyStatementEndDt = value;
                    this.SendPropertyChanged("MonthlyStatementEndDt");
                    this.OnMonthlyStatementEndDtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreditcardDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CreditcardDetail_CreditcardTransaction", Storage="_CreditcardDetail", ThisKey="CreditCardNum", OtherKey="CreditCardNum", IsForeignKey=true)]
        public CreditcardDetail CreditcardDetail
        {
            get
            {
                return this._CreditcardDetail.Entity;
            }
            set
            {
                CreditcardDetail previousValue = this._CreditcardDetail.Entity;
                if ((previousValue != value) || (this._CreditcardDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CreditcardDetail.Entity = null;
                        previousValue.CreditcardTransaction = null;
                    }
                    this._CreditcardDetail.Entity = value;
                    if (value != null)
                    {
                        this._CreditCardNum = value.CreditCardNum;
                        value.CreditcardTransaction = this;
                    }
                    else
                    {
                        this._CreditCardNum = default(int);
                    }
                    this.SendPropertyChanged("CreditcardDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.CustomerInfo in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.customer_info")]
    public partial class CustomerInfo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private string _FirstName;

        private string _LastName;

        private string _FullName;

        private string _Type;

        private System.Nullable<System.DateTime> _DOB;

        private string _Gender;

        private System.Nullable<int> _SSN;

        private System.Nullable<System.DateTime> _JoiningDt;

        private string _Status = @"Active";

        private string _Email;

        private string _Phone;

        private string _Address;
        #pragma warning restore 0649

        private EntitySet<Account> _Accounts;

        private EntitySet<CreditcardDetail> _CreditcardDetails;

        private EntityRef<Aspnetuser> _Aspnetuser;

        private EntitySet<Debitcard> _Debitcards;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnDOBChanging(System.Nullable<System.DateTime> value);
        partial void OnDOBChanged();
        partial void OnGenderChanging(string value);
        partial void OnGenderChanged();
        partial void OnSSNChanging(System.Nullable<int> value);
        partial void OnSSNChanged();
        partial void OnJoiningDtChanging(System.Nullable<System.DateTime> value);
        partial void OnJoiningDtChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        #endregion

        public CustomerInfo()
        {
            this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
            this._CreditcardDetails = new EntitySet<CreditcardDetail>(new Action<CreditcardDetail>(this.attach_CreditcardDetails), new Action<CreditcardDetail>(this.detach_CreditcardDetails));
            this._Aspnetuser  = default(EntityRef<Aspnetuser>);
            this._Debitcards = new EntitySet<Debitcard>(new Action<Debitcard>(this.attach_Debitcards), new Action<Debitcard>(this.detach_Debitcards));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    if (this._Aspnetuser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Name = @"First_name", Storage = "_FirstName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Name = @"Last_name", Storage = "_LastName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FullName in the schema.
        /// </summary>
        [Column(Name = @"Full_name", Storage = "_FullName", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if (this._FullName != value)
                {
                    this.OnFullNameChanging(value);
                    this.SendPropertyChanging();
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DOB in the schema.
        /// </summary>
        [Column(Storage = "_DOB", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> DOB
        {
            get
            {
                return this._DOB;
            }
            set
            {
                if (this._DOB != value)
                {
                    this.OnDOBChanging(value);
                    this.SendPropertyChanging();
                    this._DOB = value;
                    this.SendPropertyChanged("DOB");
                    this.OnDOBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gender in the schema.
        /// </summary>
        [Column(Storage = "_Gender", DbType = "VARCHAR(32) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gender
        {
            get
            {
                return this._Gender;
            }
            set
            {
                if (this._Gender != value)
                {
                    this.OnGenderChanging(value);
                    this.SendPropertyChanging();
                    this._Gender = value;
                    this.SendPropertyChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SSN in the schema.
        /// </summary>
        [Column(Storage = "_SSN", DbType = "INT(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SSN
        {
            get
            {
                return this._SSN;
            }
            set
            {
                if (this._SSN != value)
                {
                    this.OnSSNChanging(value);
                    this.SendPropertyChanging();
                    this._SSN = value;
                    this.SendPropertyChanged("SSN");
                    this.OnSSNChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JoiningDt in the schema.
        /// </summary>
        [Column(Name = @"Joining_dt", Storage = "_JoiningDt", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> JoiningDt
        {
            get
            {
                return this._JoiningDt;
            }
            set
            {
                if (this._JoiningDt != value)
                {
                    this.OnJoiningDtChanging(value);
                    this.SendPropertyChanging();
                    this._JoiningDt = value;
                    this.SendPropertyChanged("JoiningDt");
                    this.OnJoiningDtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(256) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Storage = "_Phone", CanBeNull = false, DbType = "VARCHAR(16) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", DbType = "VARCHAR(150) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Accounts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerInfo_Account", Storage="_Accounts", ThisKey="Id", OtherKey="CustomerId", DeleteRule="NO ACTION")]
        public EntitySet<Account> Accounts
        {
            get
            {
                return this._Accounts;
            }
            set
            {
                this._Accounts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CreditcardDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerInfo_CreditcardDetail", Storage="_CreditcardDetails", ThisKey="Id", OtherKey="CustomerId", DeleteRule="NO ACTION")]
        public EntitySet<CreditcardDetail> CreditcardDetails
        {
            get
            {
                return this._CreditcardDetails;
            }
            set
            {
                this._CreditcardDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Aspnetuser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_CustomerInfo", Storage="_Aspnetuser", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
        public Aspnetuser Aspnetuser
        {
            get
            {
                return this._Aspnetuser.Entity;
            }
            set
            {
                Aspnetuser previousValue = this._Aspnetuser.Entity;
                if ((previousValue != value) || (this._Aspnetuser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Aspnetuser.Entity = null;
                        previousValue.CustomerInfo = null;
                    }
                    this._Aspnetuser.Entity = value;
                    if (value != null)
                    {
                        this._Id = value.Id;
                        value.CustomerInfo = this;
                    }
                    else
                    {
                        this._Id = default(string);
                    }
                    this.SendPropertyChanged("Aspnetuser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Debitcards in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerInfo_Debitcard", Storage="_Debitcards", ThisKey="Id", OtherKey="CustomerId", DeleteRule="NO ACTION")]
        public EntitySet<Debitcard> Debitcards
        {
            get
            {
                return this._Debitcards;
            }
            set
            {
                this._Debitcards.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Accounts(Account entity)
        {
            this.SendPropertyChanging("Accounts");
            entity.CustomerInfo = this;
        }
    
        private void detach_Accounts(Account entity)
        {
            this.SendPropertyChanging("Accounts");
            entity.CustomerInfo = null;
        }

        private void attach_CreditcardDetails(CreditcardDetail entity)
        {
            this.SendPropertyChanging("CreditcardDetails");
            entity.CustomerInfo = this;
        }
    
        private void detach_CreditcardDetails(CreditcardDetail entity)
        {
            this.SendPropertyChanging("CreditcardDetails");
            entity.CustomerInfo = null;
        }

        private void attach_Debitcards(Debitcard entity)
        {
            this.SendPropertyChanging("Debitcards");
            entity.CustomerInfo = this;
        }
    
        private void detach_Debitcards(Debitcard entity)
        {
            this.SendPropertyChanging("Debitcards");
            entity.CustomerInfo = null;
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.Debitcard in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.debitcard")]
    public partial class Debitcard : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _DebitCardNumber;

        private int _AccountId;

        private string _CustomerId;

        private string _Name;

        private System.DateTime _DateOfExpiry;

        private System.DateTime _DateOfJoining;

        private string _Status = @"Active";

        private int _CVV;
        #pragma warning restore 0649

        private EntityRef<Account> _Account;

        private EntityRef<CustomerInfo> _CustomerInfo;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDebitCardNumberChanging(int value);
        partial void OnDebitCardNumberChanged();
        partial void OnAccountIdChanging(int value);
        partial void OnAccountIdChanged();
        partial void OnCustomerIdChanging(string value);
        partial void OnCustomerIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDateOfExpiryChanging(System.DateTime value);
        partial void OnDateOfExpiryChanged();
        partial void OnDateOfJoiningChanging(System.DateTime value);
        partial void OnDateOfJoiningChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnCVVChanging(int value);
        partial void OnCVVChanged();
        #endregion

        public Debitcard()
        {
            this._Account  = default(EntityRef<Account>);
            this._CustomerInfo  = default(EntityRef<CustomerInfo>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DebitCardNumber in the schema.
        /// </summary>
        [Column(Name = @"DebitCard_Number", Storage = "_DebitCardNumber", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(16) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int DebitCardNumber
        {
            get
            {
                return this._DebitCardNumber;
            }
            set
            {
                if (this._DebitCardNumber != value)
                {
                    this.OnDebitCardNumberChanging(value);
                    this.SendPropertyChanging();
                    this._DebitCardNumber = value;
                    this.SendPropertyChanged("DebitCardNumber");
                    this.OnDebitCardNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountId in the schema.
        /// </summary>
        [Column(Name = @"Account_id", Storage = "_AccountId", CanBeNull = false, DbType = "INT(8) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if (this._AccountId != value)
                {
                    if (this._Account.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerId in the schema.
        /// </summary>
        [Column(Name = @"Customer_id", Storage = "_CustomerId", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    if (this._CustomerInfo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateOfExpiry in the schema.
        /// </summary>
        [Column(Name = @"Date_of_expiry", Storage = "_DateOfExpiry", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateOfExpiry
        {
            get
            {
                return this._DateOfExpiry;
            }
            set
            {
                if (this._DateOfExpiry != value)
                {
                    this.OnDateOfExpiryChanging(value);
                    this.SendPropertyChanging();
                    this._DateOfExpiry = value;
                    this.SendPropertyChanged("DateOfExpiry");
                    this.OnDateOfExpiryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateOfJoining in the schema.
        /// </summary>
        [Column(Name = @"Date_of_joining", Storage = "_DateOfJoining", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateOfJoining
        {
            get
            {
                return this._DateOfJoining;
            }
            set
            {
                if (this._DateOfJoining != value)
                {
                    this.OnDateOfJoiningChanging(value);
                    this.SendPropertyChanging();
                    this._DateOfJoining = value;
                    this.SendPropertyChanged("DateOfJoining");
                    this.OnDateOfJoiningChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CVV in the schema.
        /// </summary>
        [Column(Storage = "_CVV", CanBeNull = false, DbType = "INT(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CVV
        {
            get
            {
                return this._CVV;
            }
            set
            {
                if (this._CVV != value)
                {
                    this.OnCVVChanging(value);
                    this.SendPropertyChanging();
                    this._CVV = value;
                    this.SendPropertyChanged("CVV");
                    this.OnCVVChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Account in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Account_Debitcard", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
        public Account Account
        {
            get
            {
                return this._Account.Entity;
            }
            set
            {
                Account previousValue = this._Account.Entity;
                if ((previousValue != value) || (this._Account.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Account.Entity = null;
                        previousValue.Debitcards.Remove(this);
                    }
                    this._Account.Entity = value;
                    if (value != null)
                    {
                        this._AccountId = value.AccountId;
                        value.Debitcards.Add(this);
                    }
                    else
                    {
                        this._AccountId = default(int);
                    }
                    this.SendPropertyChanged("Account");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerInfo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CustomerInfo_Debitcard", Storage="_CustomerInfo", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
        public CustomerInfo CustomerInfo
        {
            get
            {
                return this._CustomerInfo.Entity;
            }
            set
            {
                CustomerInfo previousValue = this._CustomerInfo.Entity;
                if ((previousValue != value) || (this._CustomerInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CustomerInfo.Entity = null;
                        previousValue.Debitcards.Remove(this);
                    }
                    this._CustomerInfo.Entity = value;
                    if (value != null)
                    {
                        this._CustomerId = value.Id;
                        value.Debitcards.Add(this);
                    }
                    else
                    {
                        this._CustomerId = default(string);
                    }
                    this.SendPropertyChanged("CustomerInfo");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.EmployeeInfo in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.employee_info")]
    public partial class EmployeeInfo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private string _FirstName;

        private string _LastName;

        private string _FullName;

        private string _Type;

        private System.Nullable<System.DateTime> _DOB;

        private string _Gender;

        private System.Nullable<int> _SSN;

        private System.Nullable<System.DateTime> _JoiningDt;

        private string _Status = @"N";

        private string _Email;

        private string _Phone;

        private string _Address;
        #pragma warning restore 0649

        private EntityRef<Aspnetuser> _Aspnetuser;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnDOBChanging(System.Nullable<System.DateTime> value);
        partial void OnDOBChanged();
        partial void OnGenderChanging(string value);
        partial void OnGenderChanged();
        partial void OnSSNChanging(System.Nullable<int> value);
        partial void OnSSNChanged();
        partial void OnJoiningDtChanging(System.Nullable<System.DateTime> value);
        partial void OnJoiningDtChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        #endregion

        public EmployeeInfo()
        {
            this._Aspnetuser  = default(EntityRef<Aspnetuser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    if (this._Aspnetuser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Name = @"First_name", Storage = "_FirstName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Name = @"Last_name", Storage = "_LastName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FullName in the schema.
        /// </summary>
        [Column(Name = @"Full_name", Storage = "_FullName", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if (this._FullName != value)
                {
                    this.OnFullNameChanging(value);
                    this.SendPropertyChanging();
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DOB in the schema.
        /// </summary>
        [Column(Storage = "_DOB", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> DOB
        {
            get
            {
                return this._DOB;
            }
            set
            {
                if (this._DOB != value)
                {
                    this.OnDOBChanging(value);
                    this.SendPropertyChanging();
                    this._DOB = value;
                    this.SendPropertyChanged("DOB");
                    this.OnDOBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gender in the schema.
        /// </summary>
        [Column(Storage = "_Gender", DbType = "VARCHAR(32) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gender
        {
            get
            {
                return this._Gender;
            }
            set
            {
                if (this._Gender != value)
                {
                    this.OnGenderChanging(value);
                    this.SendPropertyChanging();
                    this._Gender = value;
                    this.SendPropertyChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SSN in the schema.
        /// </summary>
        [Column(Storage = "_SSN", DbType = "INT(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SSN
        {
            get
            {
                return this._SSN;
            }
            set
            {
                if (this._SSN != value)
                {
                    this.OnSSNChanging(value);
                    this.SendPropertyChanging();
                    this._SSN = value;
                    this.SendPropertyChanged("SSN");
                    this.OnSSNChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JoiningDt in the schema.
        /// </summary>
        [Column(Name = @"Joining_dt", Storage = "_JoiningDt", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> JoiningDt
        {
            get
            {
                return this._JoiningDt;
            }
            set
            {
                if (this._JoiningDt != value)
                {
                    this.OnJoiningDtChanging(value);
                    this.SendPropertyChanging();
                    this._JoiningDt = value;
                    this.SendPropertyChanged("JoiningDt");
                    this.OnJoiningDtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Storage = "_Phone", CanBeNull = false, DbType = "VARCHAR(16) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", DbType = "VARCHAR(150) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aspnetuser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_EmployeeInfo", Storage="_Aspnetuser", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
        public Aspnetuser Aspnetuser
        {
            get
            {
                return this._Aspnetuser.Entity;
            }
            set
            {
                Aspnetuser previousValue = this._Aspnetuser.Entity;
                if ((previousValue != value) || (this._Aspnetuser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Aspnetuser.Entity = null;
                        previousValue.EmployeeInfo = null;
                    }
                    this._Aspnetuser.Entity = value;
                    if (value != null)
                    {
                        this._Id = value.Id;
                        value.EmployeeInfo = this;
                    }
                    else
                    {
                        this._Id = default(string);
                    }
                    this.SendPropertyChanged("Aspnetuser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.SystemLog in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.system_log")]
    public partial class SystemLog : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LogId;

        private string _Description;

        private System.Nullable<System.DateTime> _Time;

        private string _UserId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLogIdChanging(int value);
        partial void OnLogIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnTimeChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        #endregion

        public SystemLog()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LogId in the schema.
        /// </summary>
        [Column(Name = @"log_id", Storage = "_LogId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LogId
        {
            get
            {
                return this._LogId;
            }
            set
            {
                if (this._LogId != value)
                {
                    this.OnLogIdChanging(value);
                    this.SendPropertyChanging();
                    this._LogId = value;
                    this.SendPropertyChanged("LogId");
                    this.OnLogIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "VARCHAR(256) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Time in the schema.
        /// </summary>
        [Column(Name = @"`Time`", Storage = "_Time", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Time
        {
            get
            {
                return this._Time;
            }
            set
            {
                if (this._Time != value)
                {
                    this.OnTimeChanging(value);
                    this.SendPropertyChanging();
                    this._Time = value;
                    this.SendPropertyChanged("Time");
                    this.OnTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.Transaction in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.transaction")]
    public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TransactionId;

        private int _AccountId;

        private string _TransactionType;

        private System.DateTime _TransactionDate;

        private string _Description;

        private decimal _Amount;

        private string _TransactionMethod;

        private string _ApprovalStatus = @"Pending";

        private System.Nullable<bool> _Critical = false;

        private string _Status = @"Processing";

        private System.Nullable<int> _TransferTo;

        private System.Nullable<int> _TransferFrom;
        #pragma warning restore 0649

        private EntityRef<Account> _Account;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTransactionIdChanging(int value);
        partial void OnTransactionIdChanged();
        partial void OnAccountIdChanging(int value);
        partial void OnAccountIdChanged();
        partial void OnTransactionTypeChanging(string value);
        partial void OnTransactionTypeChanged();
        partial void OnTransactionDateChanging(System.DateTime value);
        partial void OnTransactionDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnTransactionMethodChanging(string value);
        partial void OnTransactionMethodChanged();
        partial void OnApprovalStatusChanging(string value);
        partial void OnApprovalStatusChanged();
        partial void OnCriticalChanging(System.Nullable<bool> value);
        partial void OnCriticalChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTransferToChanging(System.Nullable<int> value);
        partial void OnTransferToChanged();
        partial void OnTransferFromChanging(System.Nullable<int> value);
        partial void OnTransferFromChanged();
        #endregion

        public Transaction()
        {
            this._Account  = default(EntityRef<Account>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Name = @"Transaction_id", Storage = "_TransactionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(8) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountId in the schema.
        /// </summary>
        [Column(Name = @"Account_id", Storage = "_AccountId", CanBeNull = false, DbType = "INT(8) NOT NULL", IsPrimaryKey = true)]
        public int AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if (this._AccountId != value)
                {
                    if (this._Account.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionType in the schema.
        /// </summary>
        [Column(Name = @"Transaction_type", Storage = "_TransactionType", CanBeNull = false, DbType = "VARCHAR(32) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TransactionType
        {
            get
            {
                return this._TransactionType;
            }
            set
            {
                if (this._TransactionType != value)
                {
                    this.OnTransactionTypeChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionType = value;
                    this.SendPropertyChanged("TransactionType");
                    this.OnTransactionTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionDate in the schema.
        /// </summary>
        [Column(Name = @"Transaction_date", Storage = "_TransactionDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "VARCHAR(500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Storage = "_Amount", CanBeNull = false, DbType = "DECIMAL(10,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransactionMethod in the schema.
        /// </summary>
        [Column(Name = @"Transaction_Method", Storage = "_TransactionMethod", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TransactionMethod
        {
            get
            {
                return this._TransactionMethod;
            }
            set
            {
                if (this._TransactionMethod != value)
                {
                    this.OnTransactionMethodChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionMethod = value;
                    this.SendPropertyChanged("TransactionMethod");
                    this.OnTransactionMethodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApprovalStatus in the schema.
        /// </summary>
        [Column(Name = @"Approval_status", Storage = "_ApprovalStatus", DbType = "VARCHAR(32) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ApprovalStatus
        {
            get
            {
                return this._ApprovalStatus;
            }
            set
            {
                if (this._ApprovalStatus != value)
                {
                    this.OnApprovalStatusChanging(value);
                    this.SendPropertyChanging();
                    this._ApprovalStatus = value;
                    this.SendPropertyChanged("ApprovalStatus");
                    this.OnApprovalStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Critical in the schema.
        /// </summary>
        [Column(Storage = "_Critical", DbType = "TINYINT(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Critical
        {
            get
            {
                return this._Critical;
            }
            set
            {
                if (this._Critical != value)
                {
                    this.OnCriticalChanging(value);
                    this.SendPropertyChanging();
                    this._Critical = value;
                    this.SendPropertyChanged("Critical");
                    this.OnCriticalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "VARCHAR(32) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransferTo in the schema.
        /// </summary>
        [Column(Name = @"Transfer_to", Storage = "_TransferTo", DbType = "INT(8) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransferTo
        {
            get
            {
                return this._TransferTo;
            }
            set
            {
                if (this._TransferTo != value)
                {
                    this.OnTransferToChanging(value);
                    this.SendPropertyChanging();
                    this._TransferTo = value;
                    this.SendPropertyChanged("TransferTo");
                    this.OnTransferToChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TransferFrom in the schema.
        /// </summary>
        [Column(Name = @"Transfer_from", Storage = "_TransferFrom", DbType = "INT(8) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> TransferFrom
        {
            get
            {
                return this._TransferFrom;
            }
            set
            {
                if (this._TransferFrom != value)
                {
                    this.OnTransferFromChanging(value);
                    this.SendPropertyChanging();
                    this._TransferFrom = value;
                    this.SendPropertyChanged("TransferFrom");
                    this.OnTransferFromChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Account in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Account_Transaction", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
        public Account Account
        {
            get
            {
                return this._Account.Entity;
            }
            set
            {
                Account previousValue = this._Account.Entity;
                if ((previousValue != value) || (this._Account.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Account.Entity = null;
                        previousValue.Transactions.Remove(this);
                    }
                    this._Account.Entity = value;
                    if (value != null)
                    {
                        this._AccountId = value.AccountId;
                        value.Transactions.Add(this);
                    }
                    else
                    {
                        this._AccountId = default(int);
                    }
                    this.SendPropertyChanged("Account");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BankofasuContext.UserSecurityQuestion in the schema.
    /// </summary>
    [Table(Name = @"bankofasu.user_security_question")]
    public partial class UserSecurityQuestion : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private string _Q1;

        private string _Q2;

        private string _Q3;

        private string _A1;

        private string _A2;

        private string _A3;
        #pragma warning restore 0649

        private EntityRef<Aspnetuser> _Aspnetuser;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnQ1Changing(string value);
        partial void OnQ1Changed();
        partial void OnQ2Changing(string value);
        partial void OnQ2Changed();
        partial void OnQ3Changing(string value);
        partial void OnQ3Changed();
        partial void OnA1Changing(string value);
        partial void OnA1Changed();
        partial void OnA2Changing(string value);
        partial void OnA2Changed();
        partial void OnA3Changing(string value);
        partial void OnA3Changed();
        #endregion

        public UserSecurityQuestion()
        {
            this._Aspnetuser  = default(EntityRef<Aspnetuser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    if (this._Aspnetuser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Q1 in the schema.
        /// </summary>
        [Column(Storage = "_Q1", CanBeNull = false, DbType = "VARCHAR(256) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Q1
        {
            get
            {
                return this._Q1;
            }
            set
            {
                if (this._Q1 != value)
                {
                    this.OnQ1Changing(value);
                    this.SendPropertyChanging();
                    this._Q1 = value;
                    this.SendPropertyChanged("Q1");
                    this.OnQ1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Q2 in the schema.
        /// </summary>
        [Column(Storage = "_Q2", CanBeNull = false, DbType = "VARCHAR(256) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Q2
        {
            get
            {
                return this._Q2;
            }
            set
            {
                if (this._Q2 != value)
                {
                    this.OnQ2Changing(value);
                    this.SendPropertyChanging();
                    this._Q2 = value;
                    this.SendPropertyChanged("Q2");
                    this.OnQ2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Q3 in the schema.
        /// </summary>
        [Column(Storage = "_Q3", CanBeNull = false, DbType = "VARCHAR(256) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Q3
        {
            get
            {
                return this._Q3;
            }
            set
            {
                if (this._Q3 != value)
                {
                    this.OnQ3Changing(value);
                    this.SendPropertyChanging();
                    this._Q3 = value;
                    this.SendPropertyChanged("Q3");
                    this.OnQ3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for A1 in the schema.
        /// </summary>
        [Column(Storage = "_A1", CanBeNull = false, DbType = "VARCHAR(256) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string A1
        {
            get
            {
                return this._A1;
            }
            set
            {
                if (this._A1 != value)
                {
                    this.OnA1Changing(value);
                    this.SendPropertyChanging();
                    this._A1 = value;
                    this.SendPropertyChanged("A1");
                    this.OnA1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for A2 in the schema.
        /// </summary>
        [Column(Storage = "_A2", CanBeNull = false, DbType = "VARCHAR(256) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string A2
        {
            get
            {
                return this._A2;
            }
            set
            {
                if (this._A2 != value)
                {
                    this.OnA2Changing(value);
                    this.SendPropertyChanging();
                    this._A2 = value;
                    this.SendPropertyChanged("A2");
                    this.OnA2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for A3 in the schema.
        /// </summary>
        [Column(Storage = "_A3", CanBeNull = false, DbType = "VARCHAR(256) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string A3
        {
            get
            {
                return this._A3;
            }
            set
            {
                if (this._A3 != value)
                {
                    this.OnA3Changing(value);
                    this.SendPropertyChanging();
                    this._A3 = value;
                    this.SendPropertyChanged("A3");
                    this.OnA3Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aspnetuser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aspnetuser_UserSecurityQuestion", Storage="_Aspnetuser", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
        public Aspnetuser Aspnetuser
        {
            get
            {
                return this._Aspnetuser.Entity;
            }
            set
            {
                Aspnetuser previousValue = this._Aspnetuser.Entity;
                if ((previousValue != value) || (this._Aspnetuser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Aspnetuser.Entity = null;
                        previousValue.UserSecurityQuestion = null;
                    }
                    this._Aspnetuser.Entity = value;
                    if (value != null)
                    {
                        this._Id = value.Id;
                        value.UserSecurityQuestion = this;
                    }
                    else
                    {
                        this._Id = default(string);
                    }
                    this.SendPropertyChanged("Aspnetuser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
